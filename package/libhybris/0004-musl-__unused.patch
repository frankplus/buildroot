In file included from /builddir/libhybris-0.1.0_git20240901/hybris/common/q/linker_allocator.cpp:32:
In file included from /builddir/libhybris-0.1.0_git20240901/hybris/common/q/linker.h:41:
In file included from /usr/include/fortify/sys/stat.h:23:
In file included from /usr/include/sys/stat.h:30:
/usr/include/bits/stat.h:21:15: error: expected member name or ';' after declaration specifiers
   21 |         long __unused[3];
      |         ~~~~         ^

https://dev.iopsys.eu/bbf/uspd/-/merge_requests/39

--- a/hybris/common/q/bionic/libc/include/sys/cdefs-android.h
+++ b/hybris/common/q/bionic/libc/include/sys/cdefs-android.h
@@ -1,5 +1,5 @@
 #pragma once
 #include <sys/cdefs.h>
 #define __LIBC_HIDDEN__ __attribute__((visibility("hidden")))
-#define __unused __attribute__((__unused__))
+#define __UNUSED __attribute__((__unused__))
 #define __BIONIC_ALIGN(__value, __alignment) (((__value) + (__alignment)-1) & ~((__alignment)-1))
--- a/hybris/common/q/linker.cpp
+++ b/hybris/common/q/linker.cpp
@@ -1201,7 +1201,7 @@ int open_executable(const char* path, off64_t* file_offset, std::string* realpat
   return open_library_at_path(&zip_archive_cache, path, file_offset, realpath);
 }

-const char* fix_dt_needed(const char* dt_needed, const char* sopath __unused) {
+const char* fix_dt_needed(const char* dt_needed, const char* sopath __UNUSED) {
 #if !defined(__LP64__)
   // Work around incorrect DT_NEEDED entries for old apps: http://b/21364029
   int app_target_api_level = get_application_target_sdk_version();
@@ -2875,7 +2875,7 @@ bool soinfo::relocate_relr() {

 #if !defined(__mips__)
 #if defined(USE_RELA)
-static ElfW(Addr) get_addend(ElfW(Rela)* rela, ElfW(Addr) reloc_addr __unused) {
+static ElfW(Addr) get_addend(ElfW(Rela)* rela, ElfW(Addr) reloc_addr __UNUSED) {
   return rela->r_addend;
 }
 #else
--- a/hybris/common/q/linker_exidx_static.c
+++ b/hybris/common/q/linker_exidx_static.c
@@ -38,7 +38,7 @@
 extern unsigned __exidx_end;
 extern unsigned __exidx_start;

-_Unwind_Ptr __gnu_Unwind_Find_exidx(_Unwind_Ptr pc __unused,
+_Unwind_Ptr __gnu_Unwind_Find_exidx(_Unwind_Ptr pc __UNUSED,
                                     int* pcount)
 {
   *pcount = (__exidx_end-__exidx_start)/8;
--- a/hybris/common/q/linker_soinfo.cpp
+++ b/hybris/common/q/linker_soinfo.cpp
@@ -381,9 +381,9 @@ ElfW(Sym)* soinfo::elf_addr_lookup(const void* addr) {
   return nullptr;
 }

-static void call_function(const char* function_name __unused,
+static void call_function(const char* function_name __UNUSED,
                           linker_ctor_function_t function,
-                          const char* realpath __unused) {
+                          const char* realpath __UNUSED) {
   if (function == nullptr || reinterpret_cast<uintptr_t>(function) == static_cast<uintptr_t>(-1)) {
     return;
   }
@@ -393,9 +393,9 @@ static void call_function(const char* function_name __unused,
   TRACE("[ Done calling c-tor %s @ %p for '%s' ]", function_name, function, realpath);
 }

-static void call_function(const char* function_name __unused,
+static void call_function(const char* function_name __UNUSED,
                           linker_dtor_function_t function,
-                          const char* realpath __unused) {
+                          const char* realpath __UNUSED) {
   if (function == nullptr || reinterpret_cast<uintptr_t>(function) == static_cast<uintptr_t>(-1)) {
     return;
   }
@@ -406,7 +406,7 @@ static void call_function(const char* function_name __unused,
 }

 template <typename F>
-static void call_array(const char* array_name __unused,
+static void call_array(const char* array_name __UNUSED,
                        F* functions,
                        size_t count,
                        bool reverse,
